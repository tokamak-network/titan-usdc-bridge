/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MasterMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configureController"
      | "configureMinter"
      | "decrementMinterAllowance"
      | "getMinterManager"
      | "getWorker"
      | "incrementMinterAllowance"
      | "owner"
      | "removeController"
      | "removeMinter"
      | "setMinterManager"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerConfigured"
      | "ControllerRemoved"
      | "MinterAllowanceDecremented"
      | "MinterAllowanceIncremented"
      | "MinterConfigured"
      | "MinterManagerSet"
      | "MinterRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "configureController",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureMinter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementMinterAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementMinterAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinterManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementMinterAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementMinterAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ControllerConfiguredEvent {
  export type InputTuple = [_controller: AddressLike, _worker: AddressLike];
  export type OutputTuple = [_controller: string, _worker: string];
  export interface OutputObject {
    _controller: string;
    _worker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerRemovedEvent {
  export type InputTuple = [_controller: AddressLike];
  export type OutputTuple = [_controller: string];
  export interface OutputObject {
    _controller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAllowanceDecrementedEvent {
  export type InputTuple = [
    msgSender: AddressLike,
    minter: AddressLike,
    decrement: BigNumberish,
    newAllowance: BigNumberish
  ];
  export type OutputTuple = [
    msgSender: string,
    minter: string,
    decrement: bigint,
    newAllowance: bigint
  ];
  export interface OutputObject {
    msgSender: string;
    minter: string;
    decrement: bigint;
    newAllowance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAllowanceIncrementedEvent {
  export type InputTuple = [
    _msgSender: AddressLike,
    _minter: AddressLike,
    _increment: BigNumberish,
    _newAllowance: BigNumberish
  ];
  export type OutputTuple = [
    _msgSender: string,
    _minter: string,
    _increment: bigint,
    _newAllowance: bigint
  ];
  export interface OutputObject {
    _msgSender: string;
    _minter: string;
    _increment: bigint;
    _newAllowance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterConfiguredEvent {
  export type InputTuple = [
    _msgSender: AddressLike,
    _minter: AddressLike,
    _allowance: BigNumberish
  ];
  export type OutputTuple = [
    _msgSender: string,
    _minter: string,
    _allowance: bigint
  ];
  export interface OutputObject {
    _msgSender: string;
    _minter: string;
    _allowance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterManagerSetEvent {
  export type InputTuple = [
    _oldMinterManager: AddressLike,
    _newMinterManager: AddressLike
  ];
  export type OutputTuple = [
    _oldMinterManager: string,
    _newMinterManager: string
  ];
  export interface OutputObject {
    _oldMinterManager: string;
    _newMinterManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterRemovedEvent {
  export type InputTuple = [_msgSender: AddressLike, _minter: AddressLike];
  export type OutputTuple = [_msgSender: string, _minter: string];
  export interface OutputObject {
    _msgSender: string;
    _minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterMinter extends BaseContract {
  connect(runner?: ContractRunner | null): MasterMinter;
  waitForDeployment(): Promise<this>;

  interface: MasterMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configureController: TypedContractMethod<
    [_controller: AddressLike, _worker: AddressLike],
    [void],
    "nonpayable"
  >;

  configureMinter: TypedContractMethod<
    [_newAllowance: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  decrementMinterAllowance: TypedContractMethod<
    [_allowanceDecrement: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getMinterManager: TypedContractMethod<[], [string], "view">;

  getWorker: TypedContractMethod<[_controller: AddressLike], [string], "view">;

  incrementMinterAllowance: TypedContractMethod<
    [_allowanceIncrement: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeController: TypedContractMethod<
    [_controller: AddressLike],
    [void],
    "nonpayable"
  >;

  removeMinter: TypedContractMethod<[], [boolean], "nonpayable">;

  setMinterManager: TypedContractMethod<
    [_newMinterManager: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configureController"
  ): TypedContractMethod<
    [_controller: AddressLike, _worker: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureMinter"
  ): TypedContractMethod<
    [_newAllowance: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decrementMinterAllowance"
  ): TypedContractMethod<
    [_allowanceDecrement: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMinterManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWorker"
  ): TypedContractMethod<[_controller: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "incrementMinterAllowance"
  ): TypedContractMethod<
    [_allowanceIncrement: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeController"
  ): TypedContractMethod<[_controller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinterManager"
  ): TypedContractMethod<
    [_newMinterManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ControllerConfigured"
  ): TypedContractEvent<
    ControllerConfiguredEvent.InputTuple,
    ControllerConfiguredEvent.OutputTuple,
    ControllerConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "ControllerRemoved"
  ): TypedContractEvent<
    ControllerRemovedEvent.InputTuple,
    ControllerRemovedEvent.OutputTuple,
    ControllerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAllowanceDecremented"
  ): TypedContractEvent<
    MinterAllowanceDecrementedEvent.InputTuple,
    MinterAllowanceDecrementedEvent.OutputTuple,
    MinterAllowanceDecrementedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAllowanceIncremented"
  ): TypedContractEvent<
    MinterAllowanceIncrementedEvent.InputTuple,
    MinterAllowanceIncrementedEvent.OutputTuple,
    MinterAllowanceIncrementedEvent.OutputObject
  >;
  getEvent(
    key: "MinterConfigured"
  ): TypedContractEvent<
    MinterConfiguredEvent.InputTuple,
    MinterConfiguredEvent.OutputTuple,
    MinterConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "MinterManagerSet"
  ): TypedContractEvent<
    MinterManagerSetEvent.InputTuple,
    MinterManagerSetEvent.OutputTuple,
    MinterManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "MinterRemoved"
  ): TypedContractEvent<
    MinterRemovedEvent.InputTuple,
    MinterRemovedEvent.OutputTuple,
    MinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ControllerConfigured(address,address)": TypedContractEvent<
      ControllerConfiguredEvent.InputTuple,
      ControllerConfiguredEvent.OutputTuple,
      ControllerConfiguredEvent.OutputObject
    >;
    ControllerConfigured: TypedContractEvent<
      ControllerConfiguredEvent.InputTuple,
      ControllerConfiguredEvent.OutputTuple,
      ControllerConfiguredEvent.OutputObject
    >;

    "ControllerRemoved(address)": TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;
    ControllerRemoved: TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;

    "MinterAllowanceDecremented(address,address,uint256,uint256)": TypedContractEvent<
      MinterAllowanceDecrementedEvent.InputTuple,
      MinterAllowanceDecrementedEvent.OutputTuple,
      MinterAllowanceDecrementedEvent.OutputObject
    >;
    MinterAllowanceDecremented: TypedContractEvent<
      MinterAllowanceDecrementedEvent.InputTuple,
      MinterAllowanceDecrementedEvent.OutputTuple,
      MinterAllowanceDecrementedEvent.OutputObject
    >;

    "MinterAllowanceIncremented(address,address,uint256,uint256)": TypedContractEvent<
      MinterAllowanceIncrementedEvent.InputTuple,
      MinterAllowanceIncrementedEvent.OutputTuple,
      MinterAllowanceIncrementedEvent.OutputObject
    >;
    MinterAllowanceIncremented: TypedContractEvent<
      MinterAllowanceIncrementedEvent.InputTuple,
      MinterAllowanceIncrementedEvent.OutputTuple,
      MinterAllowanceIncrementedEvent.OutputObject
    >;

    "MinterConfigured(address,address,uint256)": TypedContractEvent<
      MinterConfiguredEvent.InputTuple,
      MinterConfiguredEvent.OutputTuple,
      MinterConfiguredEvent.OutputObject
    >;
    MinterConfigured: TypedContractEvent<
      MinterConfiguredEvent.InputTuple,
      MinterConfiguredEvent.OutputTuple,
      MinterConfiguredEvent.OutputObject
    >;

    "MinterManagerSet(address,address)": TypedContractEvent<
      MinterManagerSetEvent.InputTuple,
      MinterManagerSetEvent.OutputTuple,
      MinterManagerSetEvent.OutputObject
    >;
    MinterManagerSet: TypedContractEvent<
      MinterManagerSetEvent.InputTuple,
      MinterManagerSetEvent.OutputTuple,
      MinterManagerSetEvent.OutputObject
    >;

    "MinterRemoved(address,address)": TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;
    MinterRemoved: TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
