/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MessageHashUtilsTest,
  MessageHashUtilsTestInterface,
} from "../../../contracts/test/MessageHashUtilsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32",
      },
    ],
    name: "toTypedDataHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060e08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637df7a71c14602d575b600080fd5b604d60048036036040811015604157600080fd5b5080359060200135605f565b60408051918252519081900360200190f35b6000606983836070565b9392505050565b6040517f1901000000000000000000000000000000000000000000000000000000000000815260028101929092526022820152604290209056fea26469706673582212201080c163b9ea15e3697c375ad3ef97dac10ff857002afa8c6f53f7137a60abb664736f6c634300060c0033";

type MessageHashUtilsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageHashUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageHashUtilsTest__factory extends ContractFactory {
  constructor(...args: MessageHashUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MessageHashUtilsTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MessageHashUtilsTest__factory {
    return super.connect(runner) as MessageHashUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageHashUtilsTestInterface {
    return new Interface(_abi) as MessageHashUtilsTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MessageHashUtilsTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MessageHashUtilsTest;
  }
}
