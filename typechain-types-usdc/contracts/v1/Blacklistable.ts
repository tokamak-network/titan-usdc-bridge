/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BlacklistableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blacklist"
      | "blacklister"
      | "isBlacklisted"
      | "owner"
      | "transferOwnership"
      | "unBlacklist"
      | "updateBlacklister"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Blacklisted"
      | "BlacklisterChanged"
      | "OwnershipTransferred"
      | "UnBlacklisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlacklister",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlacklister",
    data: BytesLike
  ): Result;
}

export namespace BlacklistedEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlacklisterChangedEvent {
  export type InputTuple = [newBlacklister: AddressLike];
  export type OutputTuple = [newBlacklister: string];
  export interface OutputObject {
    newBlacklister: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnBlacklistedEvent {
  export type InputTuple = [_account: AddressLike];
  export type OutputTuple = [_account: string];
  export interface OutputObject {
    _account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Blacklistable extends BaseContract {
  connect(runner?: ContractRunner | null): Blacklistable;
  waitForDeployment(): Promise<this>;

  interface: BlacklistableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blacklist: TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;

  blacklister: TypedContractMethod<[], [string], "view">;

  isBlacklisted: TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unBlacklist: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBlacklister: TypedContractMethod<
    [_newBlacklister: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blacklist"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "blacklister"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unBlacklist"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlacklister"
  ): TypedContractMethod<[_newBlacklister: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Blacklisted"
  ): TypedContractEvent<
    BlacklistedEvent.InputTuple,
    BlacklistedEvent.OutputTuple,
    BlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "BlacklisterChanged"
  ): TypedContractEvent<
    BlacklisterChangedEvent.InputTuple,
    BlacklisterChangedEvent.OutputTuple,
    BlacklisterChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UnBlacklisted"
  ): TypedContractEvent<
    UnBlacklistedEvent.InputTuple,
    UnBlacklistedEvent.OutputTuple,
    UnBlacklistedEvent.OutputObject
  >;

  filters: {
    "Blacklisted(address)": TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;
    Blacklisted: TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;

    "BlacklisterChanged(address)": TypedContractEvent<
      BlacklisterChangedEvent.InputTuple,
      BlacklisterChangedEvent.OutputTuple,
      BlacklisterChangedEvent.OutputObject
    >;
    BlacklisterChanged: TypedContractEvent<
      BlacklisterChangedEvent.InputTuple,
      BlacklisterChangedEvent.OutputTuple,
      BlacklisterChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UnBlacklisted(address)": TypedContractEvent<
      UnBlacklistedEvent.InputTuple,
      UnBlacklistedEvent.OutputTuple,
      UnBlacklistedEvent.OutputObject
    >;
    UnBlacklisted: TypedContractEvent<
      UnBlacklistedEvent.InputTuple,
      UnBlacklistedEvent.OutputTuple,
      UnBlacklistedEvent.OutputObject
    >;
  };
}
